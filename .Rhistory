shiny::runApp()
require("leaflet")
require("dplyr")
require("plotly")
require("ggplot2")
require("dplyr")
require("reshape2")
require("tidyverse")
#Genreal data
dados <- read_csv("2018_09_04_dados.csv")
#Convert data to data
dados <- dados %>%
mutate(Data = as.Date(Data, format = "%d/%m/%Y"))
#iNext data
sample_coverage <- read_csv("sample_coverage.csv")
sample_coverage <- sample_coverage %>%
mutate(lty = factor(method, c("interpolated", "observed", "extrapolated"),
c("interpolation", "interpolation", "extrapolation")))
hill_numbers <- read.csv("hill_numbers.csv")
hill_numbers <- hill_numbers %>%
mutate(lty = factor(method, c("interpolated", "observed", "extrapolated"),
c("interpolation", "interpolation", "extrapolation")))
hill_ci <- read_csv("hill_ci.csv")
#Permanova data
perm_all <- read_csv("Perm_res_all.csv")
perm_adu <- read_csv("Perm_res_adult.csv")
perm_nym <- read_csv("Perm_res_nymph.csv")
#Couting the n of individulas in each point
map_plot <- dados %>% select("Ambiente", "Especie", "Estagio", "Lat", "Long") %>%
group_by_all() %>%
summarise(N = n())
View(map_plot)
map_plot <- map_plot %>% spread(Especie, N, fill = 0)
View(map_plot)
#Cretae a new data frame
dados_riq <- data.frame(lapply(map_plot[5:13], function(x) ifelse(x >= 1,1,0)))
dados_riq <- dados_riq %>%
mutate(riq = rowSums(dados_riq))
View(dados_riq)
dados_amb <- map_plot %>% select("Ambiente", "Lat", "Long", "Estagio")
dados_amb <- data.frame(dados_amb)
map_plot <- cbind(dados_amb, dados_riq)
View(map_plot)
map_plot <- cbind(dados_amb, dados_riq)
map_plot <- map_plot %>%
group_by(Lat, Long, Ambiente) %>%
summarise(riq = sum(riq))
View(map_plot)
#Couting the n of individulas in each point
map_plot <- dados %>% select("Ambiente", "Especie", "Lat", "Long") %>%
group_by_all() %>%
summarise(N = n())
map_plot <- map_plot %>% spread(Especie, N, fill = 0)
#Cretae a new data frame
dados_riq <- data.frame(lapply(map_plot[5:13], function(x) ifelse(x >= 1,1,0)))
#Cretae a new data frame
dados_riq <- data.frame(lapply(map_plot[5:12], function(x) ifelse(x >= 1,1,0)))
dados_riq <- dados_riq %>%
mutate(riq = rowSums(dados_riq))
dados_amb <- map_plot %>% select("Ambiente", "Lat", "Long", "Estagio")
dados_amb <- data.frame(dados_amb)
dados_amb <- map_plot %>% select("Ambiente", "Lat", "Long")
dados_amb <- data.frame(dados_amb)
map_plot <- cbind(dados_amb, dados_riq)
map_plot <- map_plot %>%
group_by(Lat, Long, Ambiente) %>%
summarise(riq = sum(riq))
View(map_plot)
runApp()
rsconnect::deployApp()
require("leaflet")
require("dplyr")
require("plotly")
require("ggplot2")
require("dplyr")
require("reshape2")
require("tidyverse")
#########################################################################################
#load data sets used
#########################################################################################
#Genreal data
dados <- read_csv("2018_09_04_dados.csv")
#Convert data to data
dados <- dados %>%
mutate(Data = as.Date(Data, format = "%d/%m/%Y"))
#iNext data
sample_coverage <- read_csv("sample_coverage.csv")
sample_coverage <- sample_coverage %>%
mutate(lty = factor(method, c("interpolated", "observed", "extrapolated"),
c("interpolation", "interpolation", "extrapolation")))
hill_numbers <- read.csv("hill_numbers.csv")
hill_numbers <- hill_numbers %>%
mutate(lty = factor(method, c("interpolated", "observed", "extrapolated"),
c("interpolation", "interpolation", "extrapolation")))
hill_ci <- read_csv("hill_ci.csv")
#Permanova data
perm_all <- read_csv("Perm_res_all.csv")
perm_adu <- read_csv("Perm_res_adult.csv")
perm_nym <- read_csv("Perm_res_nymph.csv")
#########################################################################################
#Manipulating data for sites map
#########################################################################################
#Couting the n of individulas in each point
map_plot <- dados %>% select("Ambiente", "Especie", "Lat", "Long") %>%
group_by_all() %>%
summarise(N = n())
map_plot <- map_plot %>% spread(Especie, N, fill = 0)
#Cretae a new data frame
dados_riq <- data.frame(lapply(map_plot[5:12], function(x) ifelse(x >= 1,1,0)))
dados_riq <- dados_riq %>%
mutate(riq = rowSums(dados_riq))
dados_amb <- map_plot %>% select("Ambiente", "Lat", "Long")
dados_amb <- data.frame(dados_amb)
map_plot <- cbind(dados_amb, dados_riq)
map_plot <- map_plot %>%
group_by(Lat, Long, Ambiente) %>%
summarise(riq = sum(riq))
pal <- colorFactor(c("#2b8cbe", "#006d2c"), domain = c("Periurbano", "Rural"))
#########################################################################################
#Manipulating data descriptive analysis
#########################################################################################
gg_esp <- dados %>%
group_by(Especie) %>%
summarise(count = n()) %>%
rename(Abundance = count)
#Creating a plot representing proportion of each stage
gg_prop <- dados %>%
group_by(Especie, Estagio) %>%
summarise(Abundance = n())
View(gg_prop)
gg_prop <- dcast(Especie ~ Estagio, data = gg_prop)
View(gg_prop)
#Creating a plot representing proportion of each stage
gg_prop <- dados %>%
group_by(Especie, Estagio) %>%
summarise(Abundance = n())
dcast(Estagio ~Especie, data = gg_prop)
gg_prop <- dados %>%
#group_by(Especie, Estagio) %>%
summarise(Abundance = n())
dcast(Estagio ~Especie, data = gg_prop)
gg_prop <- dados %>%
group_by(Especie) %>%
summarise(Abundance = n())
dcast(Estagio ~ Especie, data = gg_prop)
shiny::runApp()
require(reshape2); require(dplyr); require(vegan); require(iNEXT); require(ggplot2); require(tidyverse);
require(ggforce)
#########################################################################################
#Define functions
#########################################################################################
permanova_table <- function(x, name){
x <- fortify(x)
x <- x %>% mutate(Observation = row.names(x))
x <- x[ c(7,1:6)]
x <- x %>% replace(., is.na(.), "-")
write.csv(x, name, row.names = FALSE)
}
#########################################################################################
dados <- read_csv("2018_09_04_dados.csv")
nmds <- dcast(Ambiente + Ponto + Estagio  ~ Especie, data = dados)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
